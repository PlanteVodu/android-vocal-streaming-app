// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Coll.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Vocal;

public class Track implements java.lang.Cloneable,
                              java.io.Serializable
{
    public String author;

    public String title;

    public String filepath;

    public int duration;

    public String search;

    public Track()
    {
        this.author = "";
        this.title = "";
        this.filepath = "";
        this.search = "";
    }

    public Track(String author, String title, String filepath, int duration, String search)
    {
        this.author = author;
        this.title = title;
        this.filepath = filepath;
        this.duration = duration;
        this.search = search;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Track r = null;
        if(rhs instanceof Track)
        {
            r = (Track)rhs;
        }

        if(r != null)
        {
            if(this.author != r.author)
            {
                if(this.author == null || r.author == null || !this.author.equals(r.author))
                {
                    return false;
                }
            }
            if(this.title != r.title)
            {
                if(this.title == null || r.title == null || !this.title.equals(r.title))
                {
                    return false;
                }
            }
            if(this.filepath != r.filepath)
            {
                if(this.filepath == null || r.filepath == null || !this.filepath.equals(r.filepath))
                {
                    return false;
                }
            }
            if(this.duration != r.duration)
            {
                return false;
            }
            if(this.search != r.search)
            {
                if(this.search == null || r.search == null || !this.search.equals(r.search))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Vocal::Track");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, author);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, title);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, filepath);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, duration);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, search);
        return h_;
    }

    public Track clone()
    {
        Track c = null;
        try
        {
            c = (Track)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.author);
        ostr.writeString(this.title);
        ostr.writeString(this.filepath);
        ostr.writeInt(this.duration);
        ostr.writeString(this.search);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.author = istr.readString();
        this.title = istr.readString();
        this.filepath = istr.readString();
        this.duration = istr.readInt();
        this.search = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Track v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Track ice_read(com.zeroc.Ice.InputStream istr)
    {
        Track v = new Track();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Track> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Track v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Track> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Track.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Track _nullMarshalValue = new Track();

    public static final long serialVersionUID = 1969163546L;
}
